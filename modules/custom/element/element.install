<?php

/**
 * @file
 * Install, update and uninstall functions for the Element module.
 */

use Drupal\Core\Field\BaseFieldDefinition;

/**
 * Increase the length of the title field to 255.
 */
function element_update_8100() {
  $entityType = 'element';
  $fieldName = 'title';

  $entityTypeManager = \Drupal::entityTypeManager();
  $entityDefinitionUpdateManager = \Drupal::entityDefinitionUpdateManager();
  $database = \Drupal::database();

  /** @var \Drupal\element\ElementStorageInterface $storage */
  $storage = $entityTypeManager->getStorage($entityType);
  $entityDefinition = $entityTypeManager->getDefinition($entityType);

  // Sometimes the primary key isn't 'id'. e.g. 'eid' or 'item_id'.
  $idKey = $entityDefinition->getKey('id');
  // If there is no data table defined then use the base table.
  $tableName = $storage->getDataTable() ?: $storage->getBaseTable();

  // Store the existing values.
  $titleValues = $database->select($tableName)
    ->fields($tableName, [$idKey, $fieldName])
    ->execute()
    ->fetchAllKeyed();

  // Clear out the values.
  $database->update($tableName)
    ->fields([$fieldName => NULL])
    ->execute();

  // Do the same thing for the revision table.
  if ($entityDefinition->isRevisionable()) {
    $revisionIdKey = $entityDefinition->getKey('revision');
    $revisionTableName = $storage->getRevisionDataTable() ?: $storage->getRevisionTable();

    // Store the existing values.
    $revisionTitleValues = $database->select($revisionTableName)
      ->fields($revisionTableName, [$revisionIdKey, $fieldName])
      ->execute()
      ->fetchAllKeyed();

    // Clear out the values.
    $database->update($revisionTableName)
      ->fields([$fieldName => NULL])
      ->execute();
  }

  // Uninstall the field.
  $fieldStorageDefinition = $entityDefinitionUpdateManager->getFieldStorageDefinition($fieldName, $entityType);
  $entityDefinitionUpdateManager->uninstallFieldStorageDefinition($fieldStorageDefinition);

  // Create a new field definition.
  $newTitleField = BaseFieldDefinition::create('string')
    ->setLabel(t('Title'))
    ->setRevisionable(TRUE)
    ->setSettings([
      'max_length' => 255,
      'text_processing' => 0,
    ])
    ->setPropertyConstraints('value', ['Length' => ['max' => 255]])
    ->setDefaultValue('')
    ->setDisplayOptions('view', [
      'label' => 'above',
      'type' => 'string',
      'weight' => -4,
    ])
    ->setDisplayOptions('form', [
      'type' => 'string_textfield',
      'weight' => -4,
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setRequired(TRUE);

  // Install the new definition.
  $entityDefinitionUpdateManager->installFieldStorageDefinition($fieldName, $entityType, $entityType, $newTitleField);

  // Restore the values.
  foreach ($titleValues as $id => $value) {
    $database->update($tableName)
      ->fields([$fieldName => $value])
      ->condition($idKey, $id)
      ->execute();
  }

  // ... and the revision values.
  if (isset($revisionTitleValues)) {
    foreach ($revisionTitleValues as $id => $value) {
      $database->update($revisionTableName)
        ->fields([$fieldName => $value])
        ->condition($revisionIdKey, $id)
        ->execute();
    }
  }
}
